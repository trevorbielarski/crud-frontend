{"version":3,"sources":["services/AlbumService.js","components/ListAlbumComponent.jsx","components/CreateAlbumComponent.jsx","components/ViewAlbumComponent.jsx","App.js","reportWebVitals.js","index.js"],"names":["ALBUM_API_BASE_URL","album","axios","post","albumId","get","delete","data","put","ListAlbumComponent","props","state","albums","addAlbum","bind","editAlbum","deleteAlbum","id","AlbumService","then","res","setState","filter","this","history","push","getAllAlbums","className","onClick","map","artistName","albumName","genre","releaseYear","style","marginLeft","viewAlbum","Component","CreateAlbumComponent","saveOrUpdateAlbum","e","preventDefault","updateAlbum","changeAlbumNameHandler","event","target","value","changeArtistNameHandler","changeGenreHandler","changeReleaseYearHandler","match","params","getAlbumById","getTitle","placeholder","name","onChange","cancel","ViewAlbumComponent","back","margin","App","path","exact","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5181f2aa.chunk.js","sourcesContent":["import axios from 'axios'; \n\nconst ALBUM_API_BASE_URL = \"https://crud.bielarski.org\"; \n\nclass AlbumService { \n\n    addAlbum(album) { // OKAY\n        return axios.post(ALBUM_API_BASE_URL + '/addAlbum', album); \n    }\n\n    getAlbumById(albumId) { \n        return axios.get(ALBUM_API_BASE_URL + '/getAlbum/' + albumId); \n    }\n\n    getAllAlbums() { // OKAY\n        return axios.get(ALBUM_API_BASE_URL + '/getAllAlbums'); \n    }\n\n    deleteAlbum(album) {\n        return axios.delete(ALBUM_API_BASE_URL + '/deleteAlbum', { data: album }); \n    }\n\n    updateAlbum(album) { \n        return axios.put(ALBUM_API_BASE_URL + '/updateAlbum', album);  \n    }\n\n}\n\nexport default new AlbumService()","import React, { Component } from 'react'\nimport AlbumService from '../services/AlbumService'\n\nclass ListAlbumComponent extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            albums: []\n        }\n\n        this.addAlbum = this.addAlbum.bind(this); \n        this.editAlbum = this.editAlbum.bind(this); \n        this.deleteAlbum = this.deleteAlbum.bind(this); \n    }\n\n    deleteAlbum(album, id) {\n        AlbumService.deleteAlbum(album).then( res => {\n            this.setState({albums: this.state.albums.filter(album => album.albumId !== id)}) \n        }); \n    }\n\n    viewAlbum(id) {\n        this.props.history.push(`/crud-frontend/view-album/${id}`); \n    }\n\n    addAlbum() {\n        this.props.history.push('/crud-frontend/add-album/_add'); \n    }\n\n    editAlbum(id) { \n        this.props.history.push(`/crud-frontend/add-album/${id}`); \n    }\n\n    componentDidMount() {\n        AlbumService.getAllAlbums().then((res) => { \n            this.setState({ albums: res.data }); \n        }); \n\n    }\n\n    render() {\n        return (\n\n            <div>\n                <h2 className=\"text-center\">List of Albums</h2>\n                <div className=\"row\">\n                    <button className=\"btn btn-dark\" onClick={this.addAlbum}>Add Album</button>\n                </div>\n                <br></br>\n                <div className=\"row\">\n                    <table className=\"table table-striped table-bordered dark-bg-white-text\">\n                        <thead>\n                            <tr>\n                                <th>Artist Name</th>\n                                <th>Album Name</th>\n                                <th>Genre</th>\n                                <th>Release Year</th>\n                                <th>Actions</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                this.state.albums.map(\n                                    album =>\n                                    <tr key={album.id}>\n                                        <td>{album.artistName}</td>\n                                        <td>{album.albumName}</td>\n                                        <td>{album.genre}</td>\n                                        <td>{album.releaseYear}</td>\n                                        <td>\n                                            <button onClick={ () => this.editAlbum(album.albumId) } className=\"btn btn-dark\">Update</button>\n                                            <button style={{ marginLeft: \"10px\" }} onClick={ () => this.deleteAlbum(album, album.albumId) } className=\"btn btn-danger\">Delete</button>\n                                            <button style={{ marginLeft: \"10px\" }} onClick={ () => this.viewAlbum(album.albumId)} className=\"btn btn-dark\">View</button>\n                                        </td>\n                                    </tr>\n                                )\n                            }\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        )\n    }\n\n}\n\nexport default ListAlbumComponent","/* SHOULD ALBUMID REFERENCED BELOW INSTEAD BE JUST 'ID'?????????????????? */\n\nimport React, { Component } from 'react'\nimport AlbumService from '../services/AlbumService'; \n\nclass CreateAlbumComponent extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            id: this.props.match.params.id, \n            albumName: '', \n            artistName: '', \n            genre: '', \n            releaseYear: ''\n        }\n\n        this.changeAlbumNameHandler = this.changeAlbumNameHandler.bind(this); \n        this.changeArtistNameHandler = this.changeArtistNameHandler.bind(this); \n        this.changeGenreHandler = this.changeGenreHandler.bind(this); \n        this.changeReleaseYearHandler = this.changeReleaseYearHandler.bind(this); \n        this.saveOrUpdateAlbum = this.saveOrUpdateAlbum.bind(this); \n    }\n\n    componentDidMount() {\n        if (this.state.id === '_add') { \n            return\n        } else {\n            AlbumService.getAlbumById(this.state.id).then( (res) => {\n                let album = res.data; \n                this.setState({\n                    albumName: album.albumName, \n                    artistName: album.artistName, \n                    genre: album.genre, \n                    releaseYear: album.releaseYear\n                }); \n            }); \n        }\n    }\n\n    saveOrUpdateAlbum = (e) => {\n        e.preventDefault(); \n        \n        if (this.state.id === '_add') {\n            let album = { albumName: this.state.albumName, artistName: this.state.artistName, genre: this.state.genre, releaseYear: this.state.releaseYear }; \n            AlbumService.addAlbum(album).then( res => {\n                this.props.history.push('/crud-frontend/albums'); \n            }); \n        } else {\n            let album = { albumId: this.state.id, albumName: this.state.albumName, artistName: this.state.artistName, genre: this.state.genre, releaseYear: this.state.releaseYear }; \n            AlbumService.updateAlbum(album).then( res => {\n                this.props.history.push('/crud-frontend/albums'); \n            }); \n        }\n    }\n\n    changeAlbumNameHandler = (event) => {\n        this.setState({albumName: event.target.value}); \n    }\n\n    changeArtistNameHandler = (event) => {\n        this.setState({artistName: event.target.value}); \n    }\n\n    changeGenreHandler = (event) => {\n        this.setState({genre: event.target.value}); \n    }\n\n    changeReleaseYearHandler = (event) => {\n        this.setState({releaseYear: event.target.value}); \n    }\n\n    cancel() {\n        this.props.history.push('/crud-frontend/albums'); \n    }\n\n    getTitle() {\n        if (this.state.id === '_add') {\n            return <h3 className=\"text-center\">Add Album</h3>\n        } else {\n            return <h3 className=\"text-center\">Update Album</h3>\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"card col-md-6 offset-md-3 dark-bg-white-text\">\n                            {\n                                this.getTitle()\n                            }\n                            <div className=\"card-body \">\n                                <form>\n                                    <div className=\"form-group\">\n                                        <label>Artist Name: </label>\n                                        <input placeholder=\"Artist Name\" name=\"artistName\" className=\"form-control dark-bg-white-text\" value={this.state.artistName} onChange={this.changeArtistNameHandler}/>\n                                    </div>\n                                    <div className=\"form-group\">\n                                        <label>Album Name: </label>\n                                        <input placeholder=\"Album Name\" name=\"albumName\" className=\"form-control dark-bg-white-text\" value={this.state.albumName} onChange={this.changeAlbumNameHandler}/>\n                                    </div>\n                                    <div className=\"form-group\">\n                                        <label>Genre: </label>\n                                        <input placeholder=\"Genre\" name=\"genre\" className=\"form-control dark-bg-white-text\" value={this.state.genre} onChange={this.changeGenreHandler}/>\n                                    </div>\n                                    <div className=\"form-group\">\n                                        <label>Release Year: </label>\n                                        <input placeholder=\"Release Year\" name=\"releaseYear\" className=\"form-control dark-bg-white-text\" value={this.state.releaseYear} onChange={this.changeReleaseYearHandler}/>\n                                    </div>\n\n                                    <button className=\"btn btn-dark\" onClick={this.saveOrUpdateAlbum}>Save</button>\n                                    <button className=\"btn btn-danger\" onClick={this.cancel.bind(this)} style={{marginLeft: \"10px\"}}>Cancel</button>\n                                </form>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default CreateAlbumComponent","import React, { Component } from 'react'\nimport AlbumService from '../services/AlbumService'\n\nclass ViewAlbumComponent extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            id: this.props.match.params.id, \n            album: {}\n        }\n    }\n\n    componentDidMount() {\n        AlbumService.getAlbumById(this.state.id).then( res => {\n            this.setState({album: res.data}); \n        })\n    }\n\n    back(){\n        this.props.history.push('/crud-frontend/albums');\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"card col-md-6 offset-md-3 dark-bg-white-text\">\n                    <h3 className=\"text-center\">Album Information</h3>\n                    <div className=\"card-body\">\n                        <div className=\"row\">\n                            <div className=\"mb-2\"><u className=\"font-weight-bold\">Artist Name</u>: { this.state.album.artistName }</div>\n                        </div>\n                        <div className=\"row\">\n                            <div className=\"mb-2\"><u className=\"font-weight-bold\">Album Name</u>: { this.state.album.albumName }</div>\n                        </div>\n                        <div className=\"row\">\n                            <div className=\"mb-2\"><u className=\"font-weight-bold\">Genre</u>: { this.state.album.genre }</div>\n                        </div>\n                        <div className=\"row\">\n                            <div><u className=\"font-weight-bold\">Release Year</u>: { this.state.album.releaseYear }</div>\n                        </div>\n                    </div>\n\n                    <button className=\"btn btn-dark\" onClick={this.back.bind(this)} style={{margin: \"0 auto 0 0\"}}>View All Albums</button>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default ViewAlbumComponent","import React from 'react'; \nimport './App.css';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'; \nimport ListAlbumComponent from './components/ListAlbumComponent'; \nimport CreateAlbumComponent from './components/CreateAlbumComponent'; \nimport ViewAlbumComponent from './components/ViewAlbumComponent'; \n\nfunction App() {\n  return (\n    <div className=\"dark-bg-white-text\">\n      <Router>\n        <div className=\"container\">\n          <Switch>\n            <Route path=\"/crud-frontend/\" exact component={ListAlbumComponent}></Route>\n            <Route path=\"/crud-frontend/albums\" exact component={ListAlbumComponent}></Route>\n            <Route path=\"/crud-frontend/add-album/:id\" exact component={CreateAlbumComponent}></Route>\n            <Route path=\"/crud-frontend/view-album/:id\" exact component={ViewAlbumComponent}></Route>\n          </Switch>\n        </div>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n// SERVICE WORKER??? \nimport 'bootstrap/dist/css/bootstrap.min.css'; \n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}